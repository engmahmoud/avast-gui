#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Copyright (c) 2013, Sarah Addams All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this 
list of conditions and the following disclaimer in the documentation and/or 
other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those 
of the authors and should not be interpreted as representing official policies, 
either expressed or implied, of the FreeBSD Project.
"""

from AvastConfig import engineConfig
from PyQt4 import QtCore, QtGui
import AvastEngine
import AvastAdmin
import AvastLog
import AvastUI
import sys
import os

try:
	_encoding = QtGui.QApplication.UnicodeUTF8
	def _translate(context, text, disambig):
		return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
	def _translate(context, text, disambig):
		return QtGui.QApplication.translate(context, text, disambig)

class subAdminDialog(QtGui.QDialog, AvastAdmin.Ui_AdminDialog):
	def actionClose(self, e):
		self.done(0)
		
	def __init__(self, parent):
		self.m_parent = parent
		QtGui.QDialog.__init__(self, parent)
		# Set up the user interface from Designer.
		self.setupUi(self)
		# Connect up the buttons.
		self.pushButtonClose.clicked.connect(self.actionClose)
		# Something else

class subLogViewDialog(QtGui.QDialog, AvastLog.Ui_LogViewDialog):
	def actionClose(self, e):
		self.done(0)
		
	def __init__(self, parent):
		self.m_parent = parent
		QtGui.QDialog.__init__(self, parent)
		# Set up the user interface from Designer.
		self.setupUi(self)
		# Connect up the buttons.
		self.pushButtonClose.clicked.connect(self.actionClose)
		# Something else
			
class subAvastDialog(QtGui.QDialog, AvastUI.Ui_AvastDialog):
	def actionAdminDlg(self, e):
		dlg = subAdminDialog(self)
		dlg.show()
		dlg.exec_()
	
	def actionLogViewDlg(self, e):
		dlg = subLogViewDialog(self)
		dlg.show()
		dlg.exec_()
		
		
	def actionTidyExit(self, e):
		# sys.exit(self.m_app.exec_())
		sys.exit(0)
		
	def actionStop(self, e):
		self.pushButtonStartPause.setText(_translate("AvastDialog", "Start", None))
		self.pushButtonAdmin.setEnabled(True)
		self.buttonToggle=False
		
	def actionToggleStartPause(self, e):
		self.pushButtonAdmin.setEnabled(False)
		if (self.buttonToggle):
			self.pushButtonStartPause.setText(_translate("AvastDialog", "Start", None))		
			self.buttonToggle=False
		else:
			self.pushButtonStartPause.setText(_translate("AvastDialog", "Pause", None))		
			self.buttonToggle=True
			
	def __init__(self, app):
		self.buttonToggle = False
		self.m_Engine = AvastEngine.AvastEngine()
		
		self.m_app = app
		QtGui.QDialog.__init__(self)
		# Set up the user interface from Designer.
		self.setupUi(self)
		
		# Start state for some controls
		self.pushButtonAdmin.setEnabled(True)
		
		# Connect up the buttons.
		self.pushButtonExit.clicked.connect(self.actionTidyExit)
		self.pushButtonStartPause.clicked.connect(self.actionToggleStartPause)
		self.pushButtonStop.clicked.connect(self.actionStop)
		self.pushButtonAdmin.clicked.connect(self.actionAdminDlg)
		self.pushButtonLogView.clicked.connect(self.actionLogViewDlg)
		
if __name__ == "__main__":
	
	app = QtGui.QApplication(sys.argv)
	
	# Get the scanner's configuration via the engineConfig class
	cfg = engineConfig()	
	if (not cfg.valid()):
		print("Configuration is invalid... o woe...")
		sys.exit(1)
		
	print(cfg.currentProfile())
	print(cfg.getProfileCount())
	print(cfg.getProfileList())
	
	dlg = subAvastDialog(app)
	dlg.show()
	
	#sys.exit(0)
	sys.exit(app.exec_())

